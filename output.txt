<file_overview>
Total files: 4
Date generated: 2024-09-15 19:02:11
Folder Structure:
├── AsyncOperation.h
├── Dispatcher.h
├── main.cpp
└── ThreadPool.h

Files included:
- AsyncOperation.h
- Dispatcher.h
- ThreadPool.h
- main.cpp
</file_overview>

<file path="AsyncOperation.h" lines="92" modified="2024-09-15 18:51:56">
//
// Created by maxim on 15.09.2024.
//
#pragma once

#include <iostream>

#include "ThreadPool.h"
#include "Dispatcher.h"


template<typename T>
class AsyncOperation {
public:
    using AsyncOp = std::function<T()>;
    using Callback = std::function<void(T)>;

    AsyncOperation(ThreadPool& threadPool, Dispatcher& dispatcher)
        : m_threadPool(threadPool), m_dispatcher(dispatcher) {}

    void start(AsyncOp operation, Callback callback) {
        m_threadPool.enqueue([this, op = std::move(operation), cb = std::move(callback)]() mutable {
            try {
                T result = op();
                m_dispatcher.post([cb = std::move(cb), result]() mutable {
                    try {
                        cb(result);
                    } catch (const std::exception& e) {
                        // Handle callback exception
                        std::cerr << "Callback exception: " << e.what() << std::endl;
                    }
                });
            } catch (const std::exception& e) {
                // Handle operation exception
                std::cerr << "Operation exception: " << e.what() << std::endl;
            }
        });
    }

    std::future<T> start(AsyncOp operation) {
        auto promise = std::make_shared<std::promise<T>>();
        auto future = promise->get_future();

        m_threadPool.enqueue([op = std::move(operation), promise]() mutable {
            try {
                T result = op();
                promise->set_value(result);
            } catch (...) {
                promise->set_exception(std::current_exception());
            }
        });

        return future;
    }

private:
    ThreadPool& m_threadPool;
    Dispatcher& m_dispatcher;
};


class VoidAsyncOperation {
public:
    using VoidAsyncOp = std::function<void()>;
    using VoidCallback = std::function<void()>;

    VoidAsyncOperation(ThreadPool& threadPool, Dispatcher& dispatcher)
        : m_threadPool(threadPool), m_dispatcher(dispatcher) {}

    void start(VoidAsyncOp operation, VoidCallback callback) const {
        m_threadPool.enqueue([this, op = std::move(operation), cb = std::move(callback)]() mutable {
            try {
                op();
                m_dispatcher.post([cb = std::move(cb)]() mutable {
                    try {
                        cb();
                    } catch (const std::exception& e) {
                        // Handle callback exception
                        std::cerr << "Callback exception: " << e.what() << std::endl;
                    }
                });
            } catch (const std::exception& e) {
                // Handle operation exception
                std::cerr << "Operation exception: " << e.what() << std::endl;
            }
        });
    }

private:
    ThreadPool& m_threadPool;
    Dispatcher& m_dispatcher;
};
</file>

<file path="Dispatcher.h" lines="63" modified="2024-09-15 18:24:07">
//
// Created by maxim on 15.09.2024.
//
#pragma once
#include <mutex>
#include <queue>
#include <condition_variable>
#include <functional>

class Dispatcher {
public:
    using Task = std::function<void()>;

    // Post a task to the dispatcher
    void post(Task task) {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_tasks.push(std::move(task));
        }
        m_condition.notify_one();
    }

    // Execute all pending tasks
    void execute_pending() {
        std::queue<Task> tasks;
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            std::swap(tasks, m_tasks);
        }

        while (!tasks.empty()) {
            tasks.front()();
            tasks.pop();
        }
    }

    // Wait for tasks to be available
    void wait() {
        std::unique_lock<std::mutex> lock(m_mutex);
        if (m_tasks.empty()) {
            m_condition.wait(lock, [this]() { return !m_tasks.empty() || m_stopped; });
        }
    }

    // Stop the dispatcher
    void stop() {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_stopped = true;
        }
        m_condition.notify_all();
    }

    bool is_stopped() const {
        return m_stopped;
    }

private:
    std::queue<Task> m_tasks;
    std::mutex m_mutex;
    std::condition_variable m_condition;
    bool m_stopped = false;
};
</file>

<file path="ThreadPool.h" lines="83" modified="2024-09-15 18:40:15">
//
// Created by maxim on 15.09.2024.
//
#pragma once
#include <functional>
#include <thread>
#include <vector>
#include <queue>
#include <condition_variable>
#include <future>

class TaskQueue {
public:
    using Task = std::function<void()>;

    void push(Task task) {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_tasks.push(std::move(task));
        }
        m_condition.notify_one();
    }

    bool pop(Task& task) {
        std::unique_lock<std::mutex> lock(m_mutex);

        m_condition.wait(lock, [this]() {
            return !m_tasks.empty() || m_stopped;
        });

        if (m_stopped && m_tasks.empty())
            return false;

        task = std::move(m_tasks.front());
        m_tasks.pop();
        return true;
    }

    void stop() {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_stopped = true;
        }
        m_condition.notify_all();
    }

private:
    std::queue<Task> m_tasks;
    std::mutex m_mutex;
    std::condition_variable m_condition;
    bool m_stopped = false;
};

class ThreadPool {
public:
    explicit ThreadPool(size_t threadCount = std::thread::hardware_concurrency()) : m_queue(), m_threads(threadCount) {
        for (auto& thread : m_threads) {
            thread = std::thread([this]() {
                TaskQueue::Task task;
                while (m_queue.pop(task)) {
                    task();
                }
            });
        }
    }

    ~ThreadPool() {
        m_queue.stop();
        for (auto& thread : m_threads) {
            if (thread.joinable())
                thread.join();
        }
    }

    template<typename F>
    void enqueue(F&& task) {
        m_queue.push(std::forward<F>(task));
    }

private:
    TaskQueue m_queue;
    std::vector<std::thread> m_threads;
};
</file>

<file path="main.cpp" lines="58" modified="2024-09-15 18:54:57">
#include "AsyncOperation.h"
#include <iostream>

int main() {
    std::cout << "Starting advanced asynchronous system..." << std::endl;

    // Create a thread pool
    ThreadPool threadPool;

    // Create a dispatcher
    Dispatcher dispatcher;

    // Create an AsyncOperation instance
    AsyncOperation<int> asyncOp(threadPool, dispatcher);

    // Define the completion handler
    auto completionHandler = [](int result) {
        std::cout << "Asynchronous operation completed with result: " << result << std::endl;
    };

    int x = 8;

    // Start multiple asynchronous operations
    for (int i = 0; i < 5; ++i) {
        asyncOp.start([x]() {
            std::this_thread::sleep_for(std::chrono::seconds(2));
            return x * x;
        }, completionHandler);
    }

    std::cout << "Asynchronous operations initiated. Main thread is free to continue..." << std::endl;

    std::vector<std::future<int>> futures;
    for (int i = 0; i < 5; ++i) {
        futures.push_back(asyncOp.start([x]() {
            std::this_thread::sleep_for(std::chrono::seconds(4));
            return x * x;
        }));
    }

    // Later, collect results
    for (auto& future : futures) {
        int result = future.get(); // Will wait until the result is available
        std::cout << "Future result: " << result << std::endl;
    }


    while (!dispatcher.is_stopped()) {
        dispatcher.execute_pending();
        dispatcher.stop();
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }

    // Destructor of ThreadPool will wait for all tasks to complete
    std::cout << "Main thread completed." << std::endl;
    return 0;
}
</file>

